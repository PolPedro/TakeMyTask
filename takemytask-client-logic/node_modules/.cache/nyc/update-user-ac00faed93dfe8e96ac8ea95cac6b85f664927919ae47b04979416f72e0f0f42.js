function cov_1ndgy1zxex(){var path="C:\\Users\\polpe\\bootcamp\\collab\\skylab-bootcamp-202004\\staff\\pol-pedro\\takemytask\\takemytask-client-logic\\update-user.js";var hash="511c20702373226a0f491f8db8a6613a52eae35f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\polpe\\bootcamp\\collab\\skylab-bootcamp-202004\\staff\\pol-pedro\\takemytask\\takemytask-client-logic\\update-user.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:46}},"1":{start:{line:3,column:34},end:{line:3,column:63}},"2":{start:{line:4,column:16},end:{line:4,column:36}},"3":{start:{line:20,column:0},end:{line:43,column:15}},"4":{start:{line:21,column:4},end:{line:21,column:33}},"5":{start:{line:22,column:4},end:{line:22,column:36}},"6":{start:{line:23,column:4},end:{line:23,column:34}},"7":{start:{line:24,column:4},end:{line:24,column:25}},"8":{start:{line:25,column:4},end:{line:25,column:35}},"9":{start:{line:27,column:22},end:{line:27,column:37}},"10":{start:{line:29,column:4},end:{line:41,column:10}},"11":{start:{line:36,column:12},end:{line:36,column:38}},"12":{start:{line:36,column:32},end:{line:36,column:38}},"13":{start:{line:38,column:30},end:{line:38,column:46}},"14":{start:{line:40,column:12},end:{line:40,column:35}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:17},end:{line:20,column:18}},loc:{start:{line:20,column:57},end:{line:43,column:1}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:34,column:15},end:{line:34,column:16}},loc:{start:{line:34,column:35},end:{line:41,column:9}},line:34}},branchMap:{"0":{loc:{start:{line:36,column:12},end:{line:36,column:38}},type:"if",locations:[{start:{line:36,column:12},end:{line:36,column:38}},{start:{line:36,column:12},end:{line:36,column:38}}],line:36}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"511c20702373226a0f491f8db8a6613a52eae35f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ndgy1zxex=function(){return actualCoverage;};}return actualCoverage;}cov_1ndgy1zxex();cov_1ndgy1zxex().s[0]++;require('takemytask-commons/polyfills/string');const{utils:{Email,call}}=(cov_1ndgy1zxex().s[1]++,require('takemytask-commons'));const context=(cov_1ndgy1zxex().s[2]++,require('./context'));/**
 * calls the api and updates the users information and returns the updated user
 *
 * @param {string} name users name
 * @param {string} surname users surname 
 * @param {string} email users email
 * @param {string} password users password
 * @param {string} adress users adress
 * 
 * @returns {undefined}
 *
 * @throws {Error} if server throws errror
 */cov_1ndgy1zxex().s[3]++;module.exports=function(name,surname,email,adress){cov_1ndgy1zxex().f[0]++;cov_1ndgy1zxex().s[4]++;String.validate.notVoid(name);cov_1ndgy1zxex().s[5]++;String.validate.notVoid(surname);cov_1ndgy1zxex().s[6]++;String.validate.notVoid(email);cov_1ndgy1zxex().s[7]++;Email.validate(email);cov_1ndgy1zxex().s[8]++;String.validate.notVoid(adress);const{token}=(cov_1ndgy1zxex().s[9]++,context.storage);cov_1ndgy1zxex().s[10]++;return call('POST',`${this.API_URL}/update`,`{"name":"${name}", "surname":"${surname}", "email":"${email}", "adress":"${adress}"}`,{'Content-Type':'application/json','Authorization':`Bearer ${token}`}).then(({status,body})=>{cov_1ndgy1zxex().f[1]++;cov_1ndgy1zxex().s[11]++;if(status===201){cov_1ndgy1zxex().b[0][0]++;cov_1ndgy1zxex().s[12]++;return;}else{cov_1ndgy1zxex().b[0][1]++;}const{error}=(cov_1ndgy1zxex().s[13]++,JSON.parse(body));cov_1ndgy1zxex().s[14]++;throw new Error(error);});}.bind(context);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVwZGF0ZS11c2VyLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJ1dGlscyIsIkVtYWlsIiwiY2FsbCIsImNvbnRleHQiLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsInN1cm5hbWUiLCJlbWFpbCIsImFkcmVzcyIsIlN0cmluZyIsInZhbGlkYXRlIiwibm90Vm9pZCIsInRva2VuIiwic3RvcmFnZSIsIkFQSV9VUkwiLCJ0aGVuIiwic3RhdHVzIiwiYm9keSIsImVycm9yIiwiSlNPTiIsInBhcnNlIiwiRXJyb3IiLCJiaW5kIl0sIm1hcHBpbmdzIjoiMG9FQWVZO21IQWZaQSxPQUFPLENBQUMscUNBQUQsQ0FBUCxDQUVBLEtBQU0sQ0FBRUMsS0FBSyxDQUFFLENBQUVDLEtBQUYsQ0FBU0MsSUFBVCxDQUFULDJCQUE0QkgsT0FBTyxDQUFDLG9CQUFELENBQW5DLENBQU4sQ0FDQSxLQUFNSSxDQUFBQSxPQUFPLDBCQUFHSixPQUFPLENBQUMsV0FBRCxDQUFWLENBQWIsQ0FFQTs7Ozs7Ozs7Ozs7OzJCQWNBSyxNQUFNLENBQUNDLE9BQVAsQ0FBaUIsU0FBVUMsSUFBVixDQUFnQkMsT0FBaEIsQ0FBeUJDLEtBQXpCLENBQWdDQyxNQUFoQyxDQUF3QyxpREFDckRDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkMsT0FBaEIsQ0FBd0JOLElBQXhCLEVBRHFELHdCQUVyREksTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxPQUFoQixDQUF3QkwsT0FBeEIsRUFGcUQsd0JBR3JERyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLE9BQWhCLENBQXdCSixLQUF4QixFQUhxRCx3QkFJckRQLEtBQUssQ0FBQ1UsUUFBTixDQUFlSCxLQUFmLEVBSnFELHdCQUtyREUsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxPQUFoQixDQUF3QkgsTUFBeEIsRUFFQSxLQUFNLENBQUVJLEtBQUYsMkJBQVlWLE9BQU8sQ0FBQ1csT0FBcEIsQ0FBTixDQVBxRCx5QkFTckQsTUFBT1osQ0FBQUEsSUFBSSxDQUNYLE1BRFcsQ0FFVixHQUFFLEtBQUthLE9BQVEsU0FGTCxDQUdWLFlBQVdULElBQUssaUJBQWdCQyxPQUFRLGVBQWNDLEtBQU0sZ0JBQWVDLE1BQU8sSUFIeEUsQ0FJUCxDQUFDLGVBQWUsa0JBQWhCLENBQW9DLGdCQUFrQixVQUFTSSxLQUFNLEVBQXJFLENBSk8sQ0FBSixDQUtGRyxJQUxFLENBS0ksQ0FBQyxDQUFDQyxNQUFELENBQVNDLElBQVQsQ0FBRCxHQUFvQixrREFFdkIsR0FBSUQsTUFBTSxHQUFLLEdBQWYsQ0FBb0IsNERBQU0sQ0FBMUIsaUNBRUEsS0FBTSxDQUFFRSxLQUFGLDRCQUFZQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsSUFBWCxDQUFaLENBQU4sQ0FKdUIseUJBTXZCLEtBQU0sSUFBSUksQ0FBQUEsS0FBSixDQUFXSCxLQUFYLENBQU4sQ0FDSCxDQVpFLENBQVAsQ0FjSCxDQXZCZ0IsQ0F1QmZJLElBdkJlLENBdUJWcEIsT0F2QlUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCd0YWtlbXl0YXNrLWNvbW1vbnMvcG9seWZpbGxzL3N0cmluZycpXHJcblxyXG5jb25zdCB7IHV0aWxzOiB7IEVtYWlsLCBjYWxsIH19ID0gcmVxdWlyZSgndGFrZW15dGFzay1jb21tb25zJylcclxuY29uc3QgY29udGV4dCA9IHJlcXVpcmUoJy4vY29udGV4dCcpXHJcblxyXG4vKipcclxuICogY2FsbHMgdGhlIGFwaSBhbmQgdXBkYXRlcyB0aGUgdXNlcnMgaW5mb3JtYXRpb24gYW5kIHJldHVybnMgdGhlIHVwZGF0ZWQgdXNlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB1c2VycyBuYW1lXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdXJuYW1lIHVzZXJzIHN1cm5hbWUgXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbWFpbCB1c2VycyBlbWFpbFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgdXNlcnMgcGFzc3dvcmRcclxuICogQHBhcmFtIHtzdHJpbmd9IGFkcmVzcyB1c2VycyBhZHJlc3NcclxuICogXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBzZXJ2ZXIgdGhyb3dzIGVycnJvclxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUsIHN1cm5hbWUsIGVtYWlsLCBhZHJlc3MpIHtcclxuICAgIFN0cmluZy52YWxpZGF0ZS5ub3RWb2lkKG5hbWUpXHJcbiAgICBTdHJpbmcudmFsaWRhdGUubm90Vm9pZChzdXJuYW1lKVxyXG4gICAgU3RyaW5nLnZhbGlkYXRlLm5vdFZvaWQoZW1haWwpXHJcbiAgICBFbWFpbC52YWxpZGF0ZShlbWFpbClcclxuICAgIFN0cmluZy52YWxpZGF0ZS5ub3RWb2lkKGFkcmVzcylcclxuXHJcbiAgICBjb25zdCB7IHRva2VuIH0gPSBjb250ZXh0LnN0b3JhZ2VcclxuXHJcbiAgICByZXR1cm4gY2FsbChcclxuICAgICdQT1NUJywgXHJcbiAgICBgJHt0aGlzLkFQSV9VUkx9L3VwZGF0ZWAsIFxyXG4gICAgYHtcIm5hbWVcIjpcIiR7bmFtZX1cIiwgXCJzdXJuYW1lXCI6XCIke3N1cm5hbWV9XCIsIFwiZW1haWxcIjpcIiR7ZW1haWx9XCIsIFwiYWRyZXNzXCI6XCIke2FkcmVzc31cIn1gLFxyXG4gICAgICAgIHsnQ29udGVudC1UeXBlJzonYXBwbGljYXRpb24vanNvbicsICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Rva2VufWB9KSBcclxuICAgICAgICAudGhlbiggKHtzdGF0dXMsIGJvZHl9KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAyMDEpIHJldHVybiBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IEpTT04ucGFyc2UoYm9keSlcclxuXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciAoZXJyb3IpXHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxufS5iaW5kKGNvbnRleHQpIl19