function cov_1lzl6km2qu(){var path="C:\\Users\\polpe\\bootcamp\\collab\\skylab-bootcamp-202004\\staff\\pol-pedro\\takemytask\\takemytask-server-logic\\update-user.spec.js";var hash="13decead8dfdab366fd503e6ddb8a02e1395e33e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\polpe\\bootcamp\\collab\\skylab-bootcamp-202004\\staff\\pol-pedro\\takemytask\\takemytask-server-logic\\update-user.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:5,column:51},end:{line:5,column:58}},"2":{start:{line:7,column:19},end:{line:7,column:43}},"3":{start:{line:8,column:19},end:{line:8,column:23}},"4":{start:{line:9,column:19},end:{line:9,column:34}},"5":{start:{line:10,column:0},end:{line:10,column:44}},"6":{start:{line:11,column:47},end:{line:11,column:73}},"7":{start:{line:12,column:21},end:{line:12,column:29}},"8":{start:{line:13,column:15},end:{line:13,column:34}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"13decead8dfdab366fd503e6ddb8a02e1395e33e"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1lzl6km2qu=function(){return actualCoverage;};}return actualCoverage;}cov_1lzl6km2qu();cov_1lzl6km2qu().s[0]++;require('dotenv').config();//TODO PASS THE BODY OF REQ 
const{env:{TEST_MONGODB_URL:MONGODB_URL}}=(cov_1lzl6km2qu().s[1]++,process);const updateUser=(cov_1lzl6km2qu().s[2]++,require('./update-user'));const{random}=(cov_1lzl6km2qu().s[3]++,Math);const{expect}=(cov_1lzl6km2qu().s[4]++,require('chai'));cov_1lzl6km2qu().s[5]++;require('takemytask-commons/polyfills/json');const{mongoose,models:{User,Worker}}=(cov_1lzl6km2qu().s[6]++,require('takemytask-data'));const{ObjectId}=(cov_1lzl6km2qu().s[7]++,mongoose);const bcrypt=(cov_1lzl6km2qu().s[8]++,require('bcryptjs'));// describe('logic - register user', () => {
//     before(() => mongoose.connect(MONGODB_URL))
//     const fakeId = '5ee0ed9a603a0a4f3c650fe1'
//     let name, surname, email, password, adress, bankAcount, description, pricingHour, jobCategories, workingDistance, userId, workerId, changeName, changeName
//     beforeEach(async () => {
//         await User.deleteMany()
//         name = `name-${random()}`
//         surname = `surname-${random()}`
//         email = `e-${random()}@mail.com`
//         password = `password-${random()}`
//         adress = `street-${random()}`
//         bankAcount = `bankAcount-${random()}`
//         description = `description-${random()}`
//         pricingHour = random()*10
//         jobCategories = `jobCategories-${random()}`
//         workingDistance = random()*10
//         changeName = `changed-name-${random()}`
//         changeName = `changed-surname-${random()}`
//         const hash = await bcrypt.hash(password, 10)
//         const user = await User.create({name, surname, email, password: hash, adress})
//         const worker = await Worker.create({name, surname, email, password: hash, adress, bankAcount, description, pricingHour, jobCategories, workingDistance})
//         userId = user.id
//         workerId = worker.id
//     })
//     it('should succeed on retriving updates user', async () => {
//         await updateUser(userId)
//         const user = await User.find({id_: ObjectId(userId)})
//         expect(user).to.exist
//         expect(user.name).to.be.equal(user.name)
//         expect(result.surname).to.be.equal(user.surname)
//         expect(result.email).to.be.equal(user.email)
//         expect(result.adress).to.be.equal(user.adress)
//     })
//     it('should fail on retriving user', async () => {
//         result = await retriveUser(fakeId)
//             .catch( error => {
//                 expect(error).to.exist
//                 expect(error.message).to.be.equal(`user with id: ${fakeId} dont exists`)
//             })
//     })
//     //TODO finish test with unhappy path
//     afterEach(() => User.deleteMany())
//     after(mongoose.disconnect)
// })
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVwZGF0ZS11c2VyLnNwZWMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImNvbmZpZyIsImVudiIsIlRFU1RfTU9OR09EQl9VUkwiLCJNT05HT0RCX1VSTCIsInByb2Nlc3MiLCJ1cGRhdGVVc2VyIiwicmFuZG9tIiwiTWF0aCIsImV4cGVjdCIsIm1vbmdvb3NlIiwibW9kZWxzIiwiVXNlciIsIldvcmtlciIsIk9iamVjdElkIiwiYmNyeXB0Il0sIm1hcHBpbmdzIjoiNHhDQWVZO21IQWZaQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxNQUFsQixHQUVBO0FBRUEsS0FBTSxDQUFFQyxHQUFHLENBQUUsQ0FBRUMsZ0JBQWdCLENBQUVDLFdBQXBCLENBQVAsMkJBQTZDQyxPQUE3QyxDQUFOLENBRUEsS0FBTUMsQ0FBQUEsVUFBVSwwQkFBR04sT0FBTyxDQUFDLGVBQUQsQ0FBVixDQUFoQixDQUNBLEtBQU0sQ0FBRU8sTUFBRiwyQkFBYUMsSUFBYixDQUFOLENBQ0EsS0FBTSxDQUFFQyxNQUFGLDJCQUFhVCxPQUFPLENBQUMsTUFBRCxDQUFwQixDQUFOLEMsd0JBQ0FBLE9BQU8sQ0FBQyxtQ0FBRCxDQUFQLENBQ0EsS0FBTSxDQUFFVSxRQUFGLENBQVlDLE1BQU0sQ0FBRSxDQUFFQyxJQUFGLENBQVFDLE1BQVIsQ0FBcEIsMkJBQXlDYixPQUFPLENBQUMsaUJBQUQsQ0FBaEQsQ0FBTixDQUNBLEtBQU0sQ0FBRWMsUUFBRiwyQkFBZUosUUFBZixDQUFOLENBQ0EsS0FBTUssQ0FBQUEsTUFBTSwwQkFBR2YsT0FBTyxDQUFDLFVBQUQsQ0FBVixDQUFaLENBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpXHJcblxyXG4vL1RPRE8gUEFTUyBUSEUgQk9EWSBPRiBSRVEgXHJcblxyXG5jb25zdCB7IGVudjogeyBURVNUX01PTkdPREJfVVJMOiBNT05HT0RCX1VSTCB9IH0gPSBwcm9jZXNzXHJcblxyXG5jb25zdCB1cGRhdGVVc2VyID0gcmVxdWlyZSgnLi91cGRhdGUtdXNlcicpXHJcbmNvbnN0IHsgcmFuZG9tIH0gPSBNYXRoXHJcbmNvbnN0IHsgZXhwZWN0IH0gPSByZXF1aXJlKCdjaGFpJylcclxucmVxdWlyZSgndGFrZW15dGFzay1jb21tb25zL3BvbHlmaWxscy9qc29uJylcclxuY29uc3QgeyBtb25nb29zZSwgbW9kZWxzOiB7IFVzZXIsIFdvcmtlciB9IH0gPSByZXF1aXJlKCd0YWtlbXl0YXNrLWRhdGEnKVxyXG5jb25zdCB7IE9iamVjdElkIH0gPSBtb25nb29zZVxyXG5jb25zdCBiY3J5cHQgPSByZXF1aXJlKCdiY3J5cHRqcycpXHJcblxyXG4vLyBkZXNjcmliZSgnbG9naWMgLSByZWdpc3RlciB1c2VyJywgKCkgPT4ge1xyXG4vLyAgICAgYmVmb3JlKCgpID0+IG1vbmdvb3NlLmNvbm5lY3QoTU9OR09EQl9VUkwpKVxyXG5cclxuLy8gICAgIGNvbnN0IGZha2VJZCA9ICc1ZWUwZWQ5YTYwM2EwYTRmM2M2NTBmZTEnXHJcbi8vICAgICBsZXQgbmFtZSwgc3VybmFtZSwgZW1haWwsIHBhc3N3b3JkLCBhZHJlc3MsIGJhbmtBY291bnQsIGRlc2NyaXB0aW9uLCBwcmljaW5nSG91ciwgam9iQ2F0ZWdvcmllcywgd29ya2luZ0Rpc3RhbmNlLCB1c2VySWQsIHdvcmtlcklkLCBjaGFuZ2VOYW1lLCBjaGFuZ2VOYW1lXHJcblxyXG4vLyAgICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XHJcbi8vICAgICAgICAgYXdhaXQgVXNlci5kZWxldGVNYW55KClcclxuXHJcbi8vICAgICAgICAgbmFtZSA9IGBuYW1lLSR7cmFuZG9tKCl9YFxyXG4vLyAgICAgICAgIHN1cm5hbWUgPSBgc3VybmFtZS0ke3JhbmRvbSgpfWBcclxuLy8gICAgICAgICBlbWFpbCA9IGBlLSR7cmFuZG9tKCl9QG1haWwuY29tYFxyXG4vLyAgICAgICAgIHBhc3N3b3JkID0gYHBhc3N3b3JkLSR7cmFuZG9tKCl9YFxyXG4vLyAgICAgICAgIGFkcmVzcyA9IGBzdHJlZXQtJHtyYW5kb20oKX1gXHJcbi8vICAgICAgICAgYmFua0Fjb3VudCA9IGBiYW5rQWNvdW50LSR7cmFuZG9tKCl9YFxyXG4vLyAgICAgICAgIGRlc2NyaXB0aW9uID0gYGRlc2NyaXB0aW9uLSR7cmFuZG9tKCl9YFxyXG4vLyAgICAgICAgIHByaWNpbmdIb3VyID0gcmFuZG9tKCkqMTBcclxuLy8gICAgICAgICBqb2JDYXRlZ29yaWVzID0gYGpvYkNhdGVnb3JpZXMtJHtyYW5kb20oKX1gXHJcbi8vICAgICAgICAgd29ya2luZ0Rpc3RhbmNlID0gcmFuZG9tKCkqMTBcclxuXHJcbi8vICAgICAgICAgY2hhbmdlTmFtZSA9IGBjaGFuZ2VkLW5hbWUtJHtyYW5kb20oKX1gXHJcblxyXG4vLyAgICAgICAgIGNoYW5nZU5hbWUgPSBgY2hhbmdlZC1zdXJuYW1lLSR7cmFuZG9tKCl9YFxyXG5cclxuLy8gICAgICAgICBjb25zdCBoYXNoID0gYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEwKVxyXG5cclxuLy8gICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5jcmVhdGUoe25hbWUsIHN1cm5hbWUsIGVtYWlsLCBwYXNzd29yZDogaGFzaCwgYWRyZXNzfSlcclxuXHJcbi8vICAgICAgICAgY29uc3Qgd29ya2VyID0gYXdhaXQgV29ya2VyLmNyZWF0ZSh7bmFtZSwgc3VybmFtZSwgZW1haWwsIHBhc3N3b3JkOiBoYXNoLCBhZHJlc3MsIGJhbmtBY291bnQsIGRlc2NyaXB0aW9uLCBwcmljaW5nSG91ciwgam9iQ2F0ZWdvcmllcywgd29ya2luZ0Rpc3RhbmNlfSlcclxuXHJcbi8vICAgICAgICAgdXNlcklkID0gdXNlci5pZFxyXG5cclxuLy8gICAgICAgICB3b3JrZXJJZCA9IHdvcmtlci5pZFxyXG4vLyAgICAgfSlcclxuXHJcbi8vICAgICBpdCgnc2hvdWxkIHN1Y2NlZWQgb24gcmV0cml2aW5nIHVwZGF0ZXMgdXNlcicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBcclxuLy8gICAgICAgICBhd2FpdCB1cGRhdGVVc2VyKHVzZXJJZClcclxuXHJcbi8vICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZCh7aWRfOiBPYmplY3RJZCh1c2VySWQpfSlcclxuLy8gICAgICAgICBleHBlY3QodXNlcikudG8uZXhpc3RcclxuLy8gICAgICAgICBleHBlY3QodXNlci5uYW1lKS50by5iZS5lcXVhbCh1c2VyLm5hbWUpXHJcbi8vICAgICAgICAgZXhwZWN0KHJlc3VsdC5zdXJuYW1lKS50by5iZS5lcXVhbCh1c2VyLnN1cm5hbWUpXHJcbi8vICAgICAgICAgZXhwZWN0KHJlc3VsdC5lbWFpbCkudG8uYmUuZXF1YWwodXNlci5lbWFpbClcclxuLy8gICAgICAgICBleHBlY3QocmVzdWx0LmFkcmVzcykudG8uYmUuZXF1YWwodXNlci5hZHJlc3MpXHJcblxyXG4vLyAgICAgfSlcclxuXHJcbi8vICAgICBpdCgnc2hvdWxkIGZhaWwgb24gcmV0cml2aW5nIHVzZXInLCBhc3luYyAoKSA9PiB7XHJcbi8vICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcmV0cml2ZVVzZXIoZmFrZUlkKVxyXG4vLyAgICAgICAgICAgICAuY2F0Y2goIGVycm9yID0+IHtcclxuLy8gICAgICAgICAgICAgICAgIGV4cGVjdChlcnJvcikudG8uZXhpc3RcclxuLy8gICAgICAgICAgICAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50by5iZS5lcXVhbChgdXNlciB3aXRoIGlkOiAke2Zha2VJZH0gZG9udCBleGlzdHNgKVxyXG4vLyAgICAgICAgICAgICB9KVxyXG4vLyAgICAgfSlcclxuICAgIFxyXG4vLyAgICAgLy9UT0RPIGZpbmlzaCB0ZXN0IHdpdGggdW5oYXBweSBwYXRoXHJcblxyXG4vLyAgICAgYWZ0ZXJFYWNoKCgpID0+IFVzZXIuZGVsZXRlTWFueSgpKVxyXG5cclxuLy8gICAgIGFmdGVyKG1vbmdvb3NlLmRpc2Nvbm5lY3QpXHJcbi8vIH0pIl19